name: Build & Deploy Spring Boot

on:
  push:
    branches: [ master ]

env:
  DEFAULT_VERSION: "0.1.1"
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  FLY_DEV_API_TOKEN:  ${{ secrets.FLY_DEV_API_TOKEN }}
  FLY_PROD_API_TOKEN: ${{ secrets.FLY_PROD_API_TOKEN }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # ---------------- common ----------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags:  true

      - name: Determine version / release type
        id: version
        run: |
          MSG="${{ github.event.head_commit.message }}"
          IS_RELEASE=false
          if echo "$MSG" | grep -qE "^Release: [0-9]+\.[0-9]+\.[0-9]+"; then
            VERSION=$(echo "$MSG" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            IS_RELEASE=true
          else
            BASE=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+' | head -n 1 | sed 's/v//')
            [ -z "$BASE" ] && BASE=$DEFAULT_VERSION
            VERSION="${BASE}-dev"
          fi
          echo "version=$VERSION"     >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

      # --------------- test -------------------
      - name: Stage = tests
        run: echo "STAGE=tests" >> $GITHUB_ENV

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'

      - name: Run Maven tests
        id: tests
        run: mvn -B test

      # --------------- deploy -----------------
      - name: Stage = deploy
        if: success()
        run: echo "STAGE=deploy" >> $GITHUB_ENV

      - name: Setup Fly
        if: success()
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        id: deploy
        if: success()
        run: |
          VERSION=${{ steps.version.outputs.version }}
          IS_RELEASE=${{ steps.version.outputs.is_release }}

          CONFIG=fly.dev.toml
          TOKEN=${{ env.FLY_DEV_API_TOKEN }}
          if [ "$IS_RELEASE" = "true" ]; then
            CONFIG=fly.production.toml
            TOKEN=${{ env.FLY_PROD_API_TOKEN }}
          fi

          echo "Deploying $VERSION using $CONFIG"
          FLY_API_TOKEN=$TOKEN flyctl deploy --config $CONFIG --remote-only

      # ------------- tag only real releases ----
      - name: Tag Git version
        if: ${{ steps.version.outputs.is_release == 'true' && success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          git config user.name  github-actions
          git config user.email github-actions@github.com
          git tag "v$VERSION"
          git push origin "v$VERSION"

      # ------------- slack notify --------------
      - name: Slack notify
        uses: act10ns/slack@v2
        if: always()
        with:
          status: ${{ job.status }}
          steps:  ${{ toJson(steps) }}
          channel: '#keja-ci-cd-updates'
          message: |
            {{#*inline "prod-ok"}}🚀 *A new production app has been released*
            • Version: *v{{env.VERSION}}*{{/inline}}
            {{#*inline "dev-ok"}}✅ *Dev Deploy Successful*
            • Version: *v{{env.VERSION}}*{{/inline}}
            {{#*inline "test-fail"}}❌ *Test stage failed*{{/inline}}
            {{#*inline "prod-fail"}}❌ *Production deploy failed*{{/inline}}
            {{#*inline "dev-fail"}}❌ *Dev deploy failed*{{/inline}}

            {{#if (eq jobStatus "success")}}
              {{#if (eq env.IS_RELEASE "true")}}{{> prod-ok}}{{else}}{{> dev-ok}}{{/if}}
            {{else}}
              {{#if (eq env.STAGE "tests")}}
                {{> test-fail}}
              {{else}}
                {{#if (eq env.IS_RELEASE "true")}}{{> prod-fail}}{{else}}{{> dev-fail}}{{/if}}
              {{/if}}
            {{/if}}
        env:
          VERSION:    ${{ steps.version.outputs.version }}
          IS_RELEASE: ${{ steps.version.outputs.is_release }}
          STAGE:      ${{ env.STAGE }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
