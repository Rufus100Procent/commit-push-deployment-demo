name: Build & Deploy Spring Boot

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DEFAULT_VERSION: "0.1.1"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      FLY_DEV_API_TOKEN: ${{ secrets.FLY_DEV_API_TOKEN }}
      FLY_PROD_API_TOKEN: ${{ secrets.FLY_PROD_API_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Determine Version and Release Type
        id: version
        run: |
          set -e
          MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $MSG"

          IS_RELEASE=false

          if echo "$MSG" | grep -qE "^Release: [0-9]+\.[0-9]+\.[0-9]+"; then
            VERSION=$(echo "$MSG" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            IS_RELEASE=true
          else
            BASE=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+' | head -n 1 | sed 's/v//' | sed 's/-dev//g')
            [ -z "$BASE" ] && BASE=$DEFAULT_VERSION
            VERSION="${BASE}-dev"
          fi

          echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Run Maven Tests
        id: test
        run: mvn test

      - name: Slack - Test Failed
        if: failure() && steps.test.outcome == 'failure'
        uses: act10ns/slack@v2
        with:
          status: failure
          channel: '#keja-ci-cd-updates'
          message: |
            ‚ùå *Test stage failed*
            ‚Ä¢ Version: -

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Setup Fly
        if: success()
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        id: deploy
        if: success()
        run: |
          CONFIG="fly.dev.toml"
          TOKEN="${{ env.FLY_DEV_API_TOKEN }}"
          DEPLOY_TYPE="dev"

          if [ "$IS_RELEASE" = "true" ]; then
            CONFIG="fly.production.toml"
            TOKEN="${{ env.FLY_PROD_API_TOKEN }}"
            DEPLOY_TYPE="prod"
          fi

          echo "DEPLOY_TYPE=$DEPLOY_TYPE" >> $GITHUB_ENV
          echo "CONFIG_FILE=$CONFIG" >> $GITHUB_ENV

          echo "Deploying version $VERSION using $CONFIG"
          FLY_API_TOKEN=$TOKEN flyctl deploy --config $CONFIG --remote-only

      - name: Slack - Deploy Failed
        if: failure() && steps.deploy.outcome == 'failure'
        uses: act10ns/slack@v2
        with:
          status: failure
          channel: '#keja-ci-cd-updates'
          message: |
            ‚ùå *${{ env.DEPLOY_TYPE == 'prod' && 'Production' || 'Dev' }} deploy failed*
            ‚Ä¢ Version: v${{ env.VERSION }}

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Tag Git Version
        if: success() && env.IS_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v$VERSION"
          git push origin "v$VERSION"
      

      - name: Slack - Deploy Success
        if: success()
        uses: act10ns/slack@v2
        with:
          status: success
          channel: '#keja-ci-cd-updates'
          message: |
            {{#if (eq env.DEPLOY_TYPE "prod")}}
            üöÄ *New production app has been released*
            ‚Ä¢ Version: *v{{ env.VERSION }}*
            {{else}}
            ‚úÖ *Dev version deployed*
            ‚Ä¢ Version: *v{{ env.VERSION }}*
            {{/if}}

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
